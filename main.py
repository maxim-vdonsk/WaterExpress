import logging
import sqlite3
import calendar
import datetime
import requests
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update, 
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters
)
from config import TELEGRAM_TOKEN, MANAGER_ID  

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
(ADDRESS, PHONE, DELIVERY_DATE, BOTTLES) = range(4)

def create_database():
    conn = sqlite3.connect('baza.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data_delivery TEXT,
            client_name TEXT,
            client_address TEXT,
            number TEXT
        )
    ''')
    conn.commit()
    conn.close()

create_database()

def get_address_from_location(latitude, longitude):
    url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}"
    headers = {"User-Agent": "MyTelegramBot/1.0 (contact: example@email.com)"}  

    try:
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()

        data = response.json()
        return data.get("display_name", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Nominatim: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞"
    
    except requests.exceptions.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    keyboard = [[KeyboardButton("üö∞ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤–æ–¥—ã")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üö∞ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤–æ–¥—ã":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()

        keyboard = [[KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π", request_location=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.", reply_markup=reply_markup)
        return ADDRESS

async def address_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.location:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude
        context.user_data["client_address"] = get_address_from_location(latitude, longitude)
    else:
        context.user_data["client_address"] = update.message.text

    keyboard = [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(f"–í–∞—à –∞–¥—Ä–µ—Å: {context.user_data['client_address']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=reply_markup)
    return PHONE

async def phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_number = update.message.contact.phone_number if update.message.contact else update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —Å "+"
    if not phone_number.startswith("+"):
        phone_number = f"+{phone_number}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ "+"
    if not phone_number.lstrip('+').isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return PHONE

    context.user_data["number"] = phone_number
    await show_calendar(update, context)
    return DELIVERY_DATE

async def show_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    year, month = now.year, now.month

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    _, last_day = calendar.monthrange(year, month)

    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    if now.day == last_day:
        month += 1
        if month > 12:
            month = 1
            year += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["calendar_year"] = year
    context.user_data["calendar_month"] = month

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=generate_calendar(year, month))

def generate_calendar(year, month):
    now = datetime.datetime.now()
    keyboard, week = [], []

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    first_day, last_day = calendar.monthrange(year, month)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–∞—á–∏–Ω–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    start_day = 1
    if year == now.year and month == now.month:
        start_day = now.day + 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    for day in range(1, last_day + 1):
        if day < start_day:
            week.append(InlineKeyboardButton(" ", callback_data="disabled"))
        else:
            week.append(InlineKeyboardButton(str(day), callback_data=f"date_{day}"))

        if len(week) == 7:
            keyboard.append(week)
            week = []

    if week:
        keyboard.append(week)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–µ—Å—è—Ü
    min_year, min_month = now.year, now.month
    _, last_day_of_min_month = calendar.monthrange(min_year, min_month)
    if now.day == last_day_of_min_month:
        min_month += 1
        if min_month > 12:
            min_month = 1
            min_year += 1

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π
    if year > min_year or (year == min_year and month > min_month):
        nav_buttons.append(InlineKeyboardButton("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="prev_month"))

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "‚û° –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
    nav_buttons.append(InlineKeyboardButton("‚û° –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", callback_data="next_month"))

    keyboard.append(nav_buttons)
    return InlineKeyboardMarkup(keyboard)

async def calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("date_"):
        day = int(query.data.split("_")[1])
        month, year = context.user_data["calendar_month"], context.user_data["calendar_year"]
        context.user_data["data_delivery"] = f"{day:02d}.{month:02d}.{year}"

        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data['data_delivery']}")
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã.")
        return BOTTLES

    elif query.data == "next_month":
        month, year = context.user_data["calendar_month"] + 1, context.user_data["calendar_year"]
        if month > 12:
            month, year = 1, year + 1
        context.user_data["calendar_month"], context.user_data["calendar_year"] = month, year

    elif query.data == "prev_month":
        month, year = context.user_data["calendar_month"] - 1, context.user_data["calendar_year"]
        if month < 1:
            month, year = 12, year - 1
        context.user_data["calendar_month"], context.user_data["calendar_year"] = month, year

    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=generate_calendar(year, month))
    return DELIVERY_DATE

async def bottles_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        bottles = int(update.message.text)
        if bottles <= 0:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±—É—Ç—ã–ª–æ–∫.")
            return BOTTLES
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return BOTTLES

    context.user_data["bottles"] = bottles

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = None
    try:
        conn = sqlite3.connect('baza.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO clients (data_delivery, client_name, client_address, number)
            VALUES (?, ?, ?, ?)
        ''', (context.user_data["data_delivery"], update.message.from_user.first_name, 
              context.user_data["client_address"], context.user_data["number"]))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            conn.close()

    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {context.user_data['data_delivery']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {context.user_data['client_address']}\n"
        f"üìû <a href='tel:{context.user_data['number']}'>{context.user_data['number']}</a>\n"
        f"üß¥ –ë—É—Ç—ã–ª–∫–∏: {context.user_data['bottles']}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {update.message.from_user.first_name}"
    )

    try:
        await context.bot.send_message(
            chat_id=MANAGER_ID, 
            text=manager_text, 
            parse_mode="HTML", 
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

    return ConversationHandler.END

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            ADDRESS: [MessageHandler(filters.TEXT | filters.LOCATION, address_input)],
            PHONE: [MessageHandler(filters.TEXT | filters.CONTACT, phone_input)],
            DELIVERY_DATE: [CallbackQueryHandler(calendar_callback)],
            BOTTLES: [MessageHandler(filters.TEXT, bottles_input)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()